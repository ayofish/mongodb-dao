{"version":3,"sources":["src/BaseDao.js"],"names":["BaseDao","constructor","config","dbClient","id","query","collection","head","data","error","sort","_id","pageSize","page","match","isNaN","_page","_pageSize","_query","collectionName","_collection","dbRef","db","dbName","idString","length","output","dataset","resetOutput","find","obj","findOne","aggregationArr","$match","$skip","$limit","push","aggregate","toArray","ex","message","create","insertedData","insertOne","insertedId","update","origDataRes","findOneAndUpdate","$set","value","delete","deleteOne","deletedCount","toHexString","fail"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;AACA;;;;AAIe,MAAMA,OAAN,CAAc;AAC3B;;;;;;AAMAC,EAAAA,WAAW,CAACC,MAAD,EAASC,QAAT,EAAmB;AAC5B,SAAKC,EAAL,GAAU,IAAV;AACA,SAAKC,KAAL,GAAa,IAAb;AACA,SAAKF,QAAL,GAAgBA,QAAhB;AACA,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKI,UAAL,GAAkBJ,MAAM,CAACI,UAAP,GAAoBJ,MAAM,CAACI,UAA3B,GAAwC,EAA1D,CAL4B,CAM5B;;AACA,SAAKC,IAAL,GAAY,EAAZ;AACA,SAAKC,IAAL,GAAY,EAAZ;AACA,SAAKC,KAAL,GAAa,EAAb,CAT4B,CAU5B;;AACA,SAAKC,IAAL,GAAYR,MAAM,CAACQ,IAAP,GAAcR,MAAM,CAACQ,IAArB,GAA4B;AAAEC,MAAAA,GAAG,EAAE,CAAC;AAAR,KAAxC;AACA,SAAKC,QAAL,GAAgBV,MAAM,CAACU,QAAP,GAAkBV,MAAM,CAACU,QAAzB,GAAoC,EAApD;AACA,SAAKC,IAAL,GAAY,CAAZ;AACA,SAAKC,KAAL,GAAa,EAAb;AACD;AAED;;;;;;AAIA,MAAID,IAAJ,CAASA,IAAT,EAAe;AACb,QAAI,CAACE,KAAK,CAACF,IAAD,CAAN,IAAgB,CAACA,IAAD,GAAQ,CAA5B,EAA+B;AAC7B,WAAKG,KAAL,GAAa,CAACH,IAAd;AACD;AACF;AAED;;;;;AAGA,MAAID,QAAJ,CAAaA,QAAb,EAAuB;AACrB,QAAI,CAACG,KAAK,CAACH,QAAD,CAAN,IAAoB,CAACA,QAAD,GAAY,CAApC,EAAuC;AACrC,WAAKK,SAAL,GAAiB,CAACL,QAAlB;AACD;AACF;;AACD,MAAIC,IAAJ,GAAW;AACT,WAAO,KAAKG,KAAZ;AACD;;AACD,MAAIJ,QAAJ,GAAe;AACb,WAAO,KAAKK,SAAZ;AACD;AACD;;;;;;AAIA,MAAIZ,KAAJ,CAAUA,KAAV,EAAiB;AACf,SAAKa,MAAL,GAAcb,KAAd;AACD;;AAED,MAAIA,KAAJ,GAAY;AACV,WAAO,KAAKa,MAAZ;AACD;AAED;;;;;AAGA,MAAIZ,UAAJ,CAAea,cAAf,EAA+B;AAC7B,SAAKC,WAAL,GAAmBD,cAAnB;AACD;;AAED,MAAIb,UAAJ,GAAiB;AACf,WAAO,KAAKc,WAAZ;AACD,GArE0B,CAuE3B;AAEA;;AAEA;;;;;AAGA,MAAIC,KAAJ,GAAY;AACV,WAAO,KAAKlB,QAAL,CAAcmB,EAAd,CAAiB,KAAKC,MAAtB,EAA8BjB,UAA9B,CAAyC,KAAKA,UAA9C,CAAP;AACD;AAED;;;;;;AAIA,MAAIF,EAAJ,CAAOoB,QAAP,EAAiB;AACf,QAAIA,QAAJ,EAAc;AACZ,UAAIA,QAAQ,CAACC,MAAT,IAAmB,EAAvB,EAA2B;AACzB,aAAKd,GAAL,GAAW,uBAASa,QAAT,CAAX;AACD,OAFD,MAEO;AACL,aAAKb,GAAL,GAAW;AACTA,UAAAA,GAAG,EACD,iEACAa,QAAQ,CAACC;AAHF,SAAX;AAKA,cAAM,KAAKd,GAAX;AACD;AACF,KAXD,MAWO;AACL,WAAKA,GAAL,GAAW,IAAX;AACD;AACF;AACD;;;;;AAGA,MAAIP,EAAJ,GAAS;AACP,WAAO,KAAKO,GAAZ;AACD;AAED;;;;;AAGA,MAAIe,MAAJ,GAAa;AACX,WAAO;AACLnB,MAAAA,IAAI,EAAE;AACJM,QAAAA,IAAI,EAAE,KAAKA,IADP;AAEJD,QAAAA,QAAQ,EAAE,KAAKA,QAFX;AAGJa,QAAAA,MAAM,EAAE,KAAKjB,IAAL,CAAUiB,MAHd;AAIJE,QAAAA,OAAO,EAAE,KAAKrB;AAJV,OADD;AAOLE,MAAAA,IAAI,EAAE,KAAKA,IAPN;AAQLC,MAAAA,KAAK,EAAE,KAAKA;AARP,KAAP;AAUD;AAED;;;;;AAGAmB,EAAAA,WAAW,GAAG;AACZ,SAAKrB,IAAL,GAAY,EAAZ;AACA,SAAKC,IAAL,GAAY,EAAZ;AACA,SAAKC,KAAL,GAAa,EAAb;AACD;AAED;;;;;AAGMoB,EAAAA,IAAN,GAAa;AAAA;;AAAA;AACX,MAAA,KAAI,CAACD,WAAL;;AACA,UAAI;AACF;AACA,YAAI,KAAI,CAACxB,EAAT,EAAa;AACX,cAAM0B,GAAG,SAAS,KAAI,CAACT,KAAL,CAAWU,OAAX,CAAmB,KAAI,CAAC3B,EAAxB,CAAlB;;AACA,cAAI0B,GAAJ,EAAS;AACP,YAAA,KAAI,CAACtB,IAAL,GAAY,CAACsB,GAAD,CAAZ;AACD;AACF,SALD,MAKO;AACL;AACA,cAAIE,cAAc,GAAG,CACnB;AAAEC,YAAAA,MAAM,EAAE,KAAI,CAACnB;AAAf,WADmB,EAEnB;AAAEoB,YAAAA,KAAK,EAAE,CAAC,KAAI,CAACrB,IAAL,GAAY,CAAb,IAAkB,KAAI,CAACD;AAAhC,WAFmB,EAGnB;AAAEuB,YAAAA,MAAM,EAAE,KAAI,CAACvB;AAAf,WAHmB,CAArB;;AAKA,cAAI,KAAI,CAACP,KAAT,EAAgB;AACd2B,YAAAA,cAAc,CAACI,IAAf,CAAoB,KAAI,CAAC/B,KAAzB;AACD;;AACD,UAAA,KAAI,CAACG,IAAL,SAAkB,KAAI,CAACa,KAAL,CACfgB,SADe,CACLL,cADK,EAEftB,IAFe,CAEV,KAAI,CAACA,IAFK,EAGf4B,OAHe,EAAlB,CAVK,CAcL;AACA;AACD;AACF,OAxBD,CAwBE,OAAOC,EAAP,EAAW;AACX,QAAA,KAAI,CAACX,WAAL;;AACA,QAAA,KAAI,CAACnB,KAAL,CAAW2B,IAAX,CAAgBG,EAAE,CAACC,OAAnB;AACD;;AACD,aAAO,KAAI,CAAChC,IAAZ;AA9BW;AA+BZ;AAED;;;;;;AAIMiC,EAAAA,MAAN,CAAajC,IAAb,EAAmB;AAAA;;AAAA;AACjB,MAAA,MAAI,CAACoB,WAAL;;AACA,UAAIpB,IAAJ,EAAU;AACR,YAAI;AACF,cAAIkC,YAAY,SAAS,MAAI,CAACrB,KAAL,CAAWsB,SAAX,CAAqBnC,IAArB,CAAzB;AACA,UAAA,MAAI,CAACA,IAAL,GAAY;AAERJ,YAAAA,EAAE,EAAEsC,YAAY,CAACE;AAFT,aAGLpC,IAHK,EAAZ;AAMD,SARD,CAQE,OAAO+B,EAAP,EAAW;AACX,UAAA,MAAI,CAACX,WAAL;;AACA,UAAA,MAAI,CAACnB,KAAL,CAAW2B,IAAX,CAAgBG,EAAE,CAACC,OAAnB;AACD;AACF;;AACD,aAAO,MAAI,CAAChC,IAAZ;AAhBiB;AAiBlB;AAED;;;;;;AAIMqC,EAAAA,MAAN,CAAarC,IAAb,EAAmB;AAAA;;AAAA;AACjB,MAAA,MAAI,CAACoB,WAAL;;AACA,UAAI,CAAC,MAAI,CAACxB,EAAV,EAAc;AACZ,cAAM,gBAAN;AACD;;AACD,UAAI,CAACI,IAAL,EAAW;AACT,cAAM,cAAN;AACD;;AACD,UAAIA,IAAJ,EAAU;AACR,YAAI;AACF,cAAIsC,WAAW,SAAS,MAAI,CAACzB,KAAL,CAAW0B,gBAAX,CACtB;AAAEpC,YAAAA,GAAG,EAAE,MAAI,CAACP;AAAZ,WADsB,EAEtB;AAAE4C,YAAAA,IAAI,EAAExC;AAAR,WAFsB,CAAxB;AAIA,UAAA,MAAI,CAACA,IAAL,GAAY,iCAAMsC,WAAW,CAACG,KAAlB,GAA4BzC,IAA5B,EAAZ;AACD,SAND,CAME,OAAO+B,EAAP,EAAW;AACX,UAAA,MAAI,CAACX,WAAL;;AACA,UAAA,MAAI,CAACnB,KAAL,CAAW2B,IAAX,CAAgBG,EAAE,CAACC,OAAnB;AACD;AACF;;AACD,aAAO,MAAI,CAAChC,IAAZ;AApBiB;AAqBlB;AACD;;;;;AAGM0C,EAAAA,MAAN,GAAe;AAAA;;AAAA;AACb,MAAA,MAAI,CAACtB,WAAL;;AACA,UAAI;AACF;AACA,YAAI,MAAI,CAACxB,EAAT,EAAa;AACX,cAAM0B,GAAG,SAAS,MAAI,CAACT,KAAL,CAAW8B,SAAX,CAAqB;AAAExC,YAAAA,GAAG,EAAE,MAAI,CAACP;AAAZ,WAArB,CAAlB;;AACA,cAAI0B,GAAG,CAACsB,YAAR,EAAsB;AACpB,YAAA,MAAI,CAAC5C,IAAL,GAAY,CAAC;AAAEJ,cAAAA,EAAE,EAAE,MAAI,CAACA,EAAL,CAAQiD,WAAR;AAAN,aAAD,CAAZ;AACD,WAFD,MAEO;AACL;AACA,YAAA,MAAI,CAAC5C,KAAL,GAAa,CAAC;AAAE6C,cAAAA,IAAI,EAAE,MAAI,CAAClD,EAAL,CAAQiD,WAAR;AAAR,aAAD,CAAb;AACD;AACF,SARD,MAQO;AACL,UAAA,MAAI,CAAC5C,KAAL,GAAa,CAAC;AAAEL,YAAAA,EAAE,EAAE;AAAN,WAAD,CAAb;AACA,gBAAM,gBAAN;AACD;AACF,OAdD,CAcE,OAAOmC,EAAP,EAAW;AACX,QAAA,MAAI,CAACX,WAAL;;AACA,QAAA,MAAI,CAACnB,KAAL,CAAW2B,IAAX,CAAgBG,EAAE,CAACC,OAAnB;AACD;;AACD,aAAO,MAAI,CAAChC,IAAZ;AApBa;AAqBd;;AAnP0B","sourcesContent":["import { ObjectId } from \"mongodb\";\n/**\n * @class BaseDao\n * Base class for all api acess to mongodb\n */\nexport default class BaseDao {\n  /**\n   * @constructor\n   * @param {Object<mongo:Object<dbName: string, >>} config\n   * @param {MongoClient} dbClient instance of MongoDB Client\n   * @param {string} collectionName\n   */\n  constructor(config, dbClient) {\n    this.id = null;\n    this.query = null;\n    this.dbClient = dbClient;\n    this.config = config;\n    this.collection = config.collection ? config.collection : \"\";\n    //paginate data\n    this.head = {};\n    this.data = [];\n    this.error = [];\n    //aggregations\n    this.sort = config.sort ? config.sort : { _id: -1 };\n    this.pageSize = config.pageSize ? config.pageSize : 20;\n    this.page = 1;\n    this.match = {};\n  }\n\n  /**\n   * the page to view\n   * @param {Number} page\n   */\n  set page(page) {\n    if (!isNaN(page) && +page > 0) {\n      this._page = +page;\n    }\n  }\n\n  /**\n   * @param {Number} pageSize\n   */\n  set pageSize(pageSize) {\n    if (!isNaN(pageSize) && +pageSize > 0) {\n      this._pageSize = +pageSize;\n    }\n  }\n  get page() {\n    return this._page;\n  }\n  get pageSize() {\n    return this._pageSize;\n  }\n  /**\n   * query params from call\n   * @param {Object<field: value>} query\n   */\n  set query(query) {\n    this._query = query;\n  }\n\n  get query() {\n    return this._query;\n  }\n\n  /**\n   * @param {String} collectionName\n   */\n  set collection(collectionName) {\n    this._collection = collectionName;\n  }\n\n  get collection() {\n    return this._collection;\n  }\n\n  // get offset(){\n\n  // }\n\n  /**\n   * @return {Object} database connection to collection\n   */\n  get dbRef() {\n    return this.dbClient.db(this.dbName).collection(this.collection);\n  }\n\n  /**\n   * sets the id of the document you want to query, also sets the _idString value for raw id string\n   * @param {string} id of the document you want to query\n   */\n  set id(idString) {\n    if (idString) {\n      if (idString.length >= 24) {\n        this._id = ObjectId(idString);\n      } else {\n        this._id = {\n          _id:\n            \"invalid id, must be at least 24 characters long,curr length \" +\n            idString.length,\n        };\n        throw this._id;\n      }\n    } else {\n      this._id = null;\n    }\n  }\n  /**\n   * @return {ObjectId} mongo database id in BSON Object\n   */\n  get id() {\n    return this._id;\n  }\n\n  /**\n   * @return the output base object\n   */\n  get output() {\n    return {\n      head: {\n        page: this.page,\n        pageSize: this.pageSize,\n        length: this.data.length,\n        dataset: this.collection,\n      },\n      data: this.data,\n      error: this.error,\n    };\n  }\n\n  /**\n   * reset the output parts\n   */\n  resetOutput() {\n    this.head = {};\n    this.data = [];\n    this.error = [];\n  }\n\n  /**\n   * @return output object data\n   */\n  async find() {\n    this.resetOutput();\n    try {\n      //id declared, just get one\n      if (this.id) {\n        const obj = await this.dbRef.findOne(this.id);\n        if (obj) {\n          this.data = [obj];\n        }\n      } else {\n        // this.data = await this.dbRef.find().toArray();\n        let aggregationArr = [\n          { $match: this.match },\n          { $skip: (this.page - 1) * this.pageSize },\n          { $limit: this.pageSize },\n        ];\n        if (this.query) {\n          aggregationArr.push(this.query);\n        }\n        this.data = await this.dbRef\n          .aggregate(aggregationArr)\n          .sort(this.sort)\n          .toArray();\n        //change _id to id\n        // this.data.map(cleanMongoId);\n      }\n    } catch (ex) {\n      this.resetOutput();\n      this.error.push(ex.message);\n    }\n    return this.data;\n  }\n\n  /**\n   * inserts data into the collection, overwrite this with your own implemntation for validation\n   * @param {Object} data for insert\n   */\n  async create(data) {\n    this.resetOutput();\n    if (data) {\n      try {\n        let insertedData = await this.dbRef.insertOne(data);\n        this.data = [\n          {\n            id: insertedData.insertedId,\n            ...data,\n          },\n        ];\n      } catch (ex) {\n        this.resetOutput();\n        this.error.push(ex.message);\n      }\n    }\n    return this.data;\n  }\n\n  /**\n   * Updates the document with the id set in the class attribute\n   * @param {Object} data for update\n   */\n  async update(data) {\n    this.resetOutput();\n    if (!this.id) {\n      throw \"id is required\";\n    }\n    if (!data) {\n      throw \"missing data\";\n    }\n    if (data) {\n      try {\n        let origDataRes = await this.dbRef.findOneAndUpdate(\n          { _id: this.id },\n          { $set: data }\n        );\n        this.data = [{ ...origDataRes.value, ...data }];\n      } catch (ex) {\n        this.resetOutput();\n        this.error.push(ex.message);\n      }\n    }\n    return this.data;\n  }\n  /**\n   * handles delete operations\n   */\n  async delete() {\n    this.resetOutput();\n    try {\n      //id declared, just get one\n      if (this.id) {\n        const obj = await this.dbRef.deleteOne({ _id: this.id });\n        if (obj.deletedCount) {\n          this.data = [{ id: this.id.toHexString() }];\n        } else {\n          //failed delete for some reason\n          this.error = [{ fail: this.id.toHexString() }];\n        }\n      } else {\n        this.error = [{ id: \"required\" }];\n        throw \"id is required\";\n      }\n    } catch (ex) {\n      this.resetOutput();\n      this.error.push(ex.message);\n    }\n    return this.data;\n  }\n}\n"],"file":"BaseDao.js"}